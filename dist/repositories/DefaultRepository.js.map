{"version":3,"sources":["../../src/repositories/DefaultRepository.js"],"names":["DefaultRepository","modelName","document","DatabaseManager","getConnection","database","Promise","resolve","reject","collection","insert","err","result","ops","find","toArray","_id","updateOne","$set","deleteOne"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;IAEqBA,iB;AACjB,+BAAaC,SAAb,EAAwB;AAAA;;AACpB,aAAKA,SAAL,GAAiBA,SAAjB;AACH;;;;;gGAESC,Q;;;;;;;;;uCACeC,0BAAgBC,aAAhB,E;;;AAAjBC,wC;iEACG,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,wCAAIC,aAAaJ,SAASI,UAAT,CAAoB,MAAKR,SAAzB,CAAjB;AACAQ,+CAAWC,MAAX,CAAkBR,QAAlB,EAA4B,UAACS,GAAD,EAAMC,MAAN,EAAiB;AACzC,4CAAG,CAACD,GAAJ,EAAQ;AACJJ,oDAAQK,OAAOC,GAAf;AACH,yCAFD,MAEO;AACHL,mDAAOG,GAAP;AACH;AACJ,qCAND;AAOH,iCATM,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;uCAacR,0BAAgBC,aAAhB,E;;;AAAjBC,wC;kEACG,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,wCAAIC,aAAaJ,SAASI,UAAT,CAAoB,OAAKR,SAAzB,CAAjB;AACAQ,+CAAWK,IAAX,CAAgB,EAAhB,EAAoBC,OAApB,CAA4B,UAACJ,GAAD,EAAMC,MAAN,EAAiB;AACzC,4CAAG,CAACD,GAAJ,EAAQ;AACJJ,oDAAQK,MAAR;AACH,yCAFD,MAEO;AACHJ,mDAAOG,GAAP;AACH;AACJ,qCAND;AAOH,iCATM,C;;;;;;;;;;;;;;;;;;;kGAYAK,G;;;;;;;;;uCACcb,0BAAgBC,aAAhB,E;;;AAAjBC,wC;kEACG,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,wCAAIC,aAAaJ,SAASI,UAAT,CAAoB,OAAKR,SAAzB,CAAjB;AACAQ,+CAAWK,IAAX,CAAgB,EAAEE,KAAK,uBAASA,GAAT,CAAP,EAAhB,EAAwCD,OAAxC,CAAgD,UAACJ,GAAD,EAAMC,MAAN,EAAiB;AAC7D,4CAAG,CAACD,GAAJ,EAAQ;AACJJ,oDAAQK,MAAR;AACH,yCAFD,MAEO;AACHJ,mDAAOG,GAAP;AACH;AACJ,qCAND;AAOH,iCATM,C;;;;;;;;;;;;;;;;;;;kGAYET,Q;;;;;;;;;uCACYC,0BAAgBC,aAAhB,E;;;AAAjBC,wC;kEACG,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,wCAAIC,aAAaJ,SAASI,UAAT,CAAoB,OAAKR,SAAzB,CAAjB;AACAQ,+CAAWQ,SAAX,CAAqB,EAAED,KAAK,uBAASA,GAAT,CAAP,EAArB,EAA6C,EAAEE,MAAMhB,QAAR,EAA7C,EAAiE,UAACS,GAAD,EAAMC,MAAN,EAAiB;AAC9E,4CAAG,CAACD,GAAJ,EAAQ;AACJJ,oDAAQK,MAAR;AACH,yCAFD,MAEO;AACHJ,mDAAOG,GAAP;AACH;AACJ,qCAND;AAOH,iCATM,C;;;;;;;;;;;;;;;;;;;kGAYEK,G;;;;;;;;;uCACYb,0BAAgBC,aAAhB,E;;;AAAjBC,wC;kEACG,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,wCAAIC,aAAaJ,SAASI,UAAT,CAAoB,OAAKR,SAAzB,CAAjB;AACAQ,+CAAWU,SAAX,CAAqB,EAAEH,KAAK,uBAASA,GAAT,CAAP,EAArB,EAA6C,UAACL,GAAD,EAAMC,MAAN,EAAiB;AAC1D,4CAAG,CAACD,GAAJ,EAAQ;AACJJ,oDAAQK,MAAR;AACH,yCAFD,MAEO;AACHJ,mDAAOG,GAAP;AACH;AACJ,qCAND;AAOH,iCATM,C;;;;;;;;;;;;;;;;;;;;;kBA/DMX,iB","file":"DefaultRepository.js","sourcesContent":["import DatabaseManager from \"../application/DatabaseManager\";\r\nimport { ObjectId } from 'mongodb';\r\n\r\nexport default class DefaultRepository {\r\n    constructor (modelName) {\r\n        this.modelName = modelName;\r\n    }\r\n\r\n    async add(document) {\r\n        let database = await DatabaseManager.getConnection();\r\n        return new Promise((resolve, reject) => {\r\n            let collection = database.collection(this.modelName);\r\n            collection.insert(document, (err, result) => {\r\n                if(!err){\r\n                    resolve(result.ops);\r\n                } else {\r\n                    reject(err);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    async findAll() {\r\n        let database = await DatabaseManager.getConnection();\r\n        return new Promise((resolve, reject) => {\r\n            let collection = database.collection(this.modelName);\r\n            collection.find({}).toArray((err, result) => {\r\n                if(!err){\r\n                    resolve(result);\r\n                } else {\r\n                    reject(err);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    async find(_id) {\r\n        let database = await DatabaseManager.getConnection();\r\n        return new Promise((resolve, reject) => {\r\n            let collection = database.collection(this.modelName);\r\n            collection.find({ _id: ObjectId(_id) }).toArray((err, result) => {\r\n                if(!err){\r\n                    resolve(result);\r\n                } else {\r\n                    reject(err);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    async update(document) {\r\n        let database = await DatabaseManager.getConnection();\r\n        return new Promise((resolve, reject) => {\r\n            let collection = database.collection(this.modelName);\r\n            collection.updateOne({ _id: ObjectId(_id) }, { $set: document }, (err, result) => {\r\n                if(!err){\r\n                    resolve(result);\r\n                } else {\r\n                    reject(err);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    async remove(_id){\r\n        let database = await DatabaseManager.getConnection();\r\n        return new Promise((resolve, reject) => {\r\n            let collection = database.collection(this.modelName);\r\n            collection.deleteOne({ _id: ObjectId(_id) }, (err, result) => {\r\n                if(!err){\r\n                    resolve(result);\r\n                } else {\r\n                    reject(err);\r\n                }\r\n            });\r\n        });\r\n    }\r\n}"]}