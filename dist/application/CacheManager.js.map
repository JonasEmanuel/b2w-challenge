{"version":3,"sources":["../../src/application/CacheManager.js"],"names":["CacheManager","client","redis","createClient","key","value","set","Promise","resolve","reject","get","err"],"mappings":";;;;;;;;AAAA;;;;;;;;IAEqBA,Y;AACjB,4BAAc;AAAA;;AACV,aAAKC,MAAL,GAAcC,gBAAMC,YAAN,EAAd;AACH;;;;+BAEMC,G,EAAKC,K,EAAM;AACd,iBAAKJ,MAAL,CAAYK,GAAZ,CAAgBF,GAAhB,EAAqBC,KAArB,EAA4B,IAA5B,EAAkC,KAAlC;AACH;;;+BAEMD,G,EAAI;AAAA;;AACP,mBAAO,IAAIG,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,sBAAKR,MAAL,CAAYS,GAAZ,CAAgBN,GAAhB,EAAqB,UAACO,GAAD,EAAMN,KAAN,EAAgB;AACjC,wBAAG,CAACM,GAAJ,EAAS;AACLH,gCAAQH,KAAR;AACH,qBAFD,MAEM;AACFI,+BAAOE,GAAP;AACH;AACJ,iBAND;AAOH,aARM,CAAP;AASH;;;;;;kBAnBgBX,Y","file":"CacheManager.js","sourcesContent":["import redis from 'redis';\r\n\r\nexport default class CacheManager {\r\n    constructor() {\r\n        this.client = redis.createClient();\r\n    }\r\n\r\n    setKey(key, value){\r\n        this.client.set(key, value, 'EX', 86400);\r\n    }\r\n\r\n    getKey(key){\r\n        return new Promise((resolve, reject) => {\r\n            this.client.get(key, (err, value) => {\r\n                if(!err) {\r\n                    resolve(value);\r\n                } else{\r\n                    reject(err);\r\n                } \r\n            });\r\n        })\r\n    }\r\n}"]}